# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
  # schedule:
  #   - cron: "0 * * * *"

name: Spiderbot

jobs:
  collect-data:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest,  r: '4.2.0'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      R_COMPILE_AND_INSTALL_PACKAGES: always
      NOT_CRAN: false
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT_1: ${{ secrets.PAT_1 }}
      GITHUB_PAT_2: ${{ secrets.PAT_2 }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Prepare
        run: |
          echo "utils::chooseCRANmirror(graphics=FALSE, ind = 1)" > .Rprofile
          Rscript -e "Date <- as.character(read.dcf('DESCRIPTION', 'Date'));
                      URL <- if(is.na(Date)) 'https://cran.rstudio.com/' else paste0('https://mran.microsoft.com/snapshot/', Date);
                      Rprofile <- file('.Rprofile', open = 'wt');
                      writeLines('.libPaths(Sys.getenv(\'R_LIBS_USER\'))', Rprofile);
                      writeLines('require(remotes, quietly = TRUE)', Rprofile);
                      writeLines(paste0('options(repos = \'', URL, '\')'), Rprofile);
                      close(Rprofile)"
          Rscript -e "if(!'remotes' %in% rownames(utils::installed.packages())) utils::install.packages('remotes')"

      - name: Query dependencies
        run: |
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')
          sudo apt-get install build-essential libcurl4-gnutls-dev libxml2-dev libssl-dev libgit2-dev

      - name: Install dependencies
        run: |
          remotes::update_packages(dependencies = TRUE)
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran(c("devtools", "rcmdcheck", "rmarkdown"))
        shell: Rscript {0}

      - name: Cache Queries
        uses: actions/cache@v3
        with:
          # path: ${{ github.GITHUB_WORKSPACE }}/_cache
          path: /home/runner/work/github.observatory/github.observatory
          key: ${{ runner.os }}-${{ hashFiles('_cache/crawler/repo/db.csv', '_cache/crawler/user/db.csv') }}

      - name: Collate Packages Information From Github
        run: |
          pkgload::load_all(usethis::proj_get())
          cli::cli_h1("Collate Packages Information From Github")
          source(system.file("scripts", "crawler-collate-repos.R", package = "github.observatory", mustWork = TRUE))
        shell: Rscript {0}
